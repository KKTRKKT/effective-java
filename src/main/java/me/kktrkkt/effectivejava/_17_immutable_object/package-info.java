package me.kktrkkt.effectivejava._17_immutable_object;

/*
불변객체
    - 불변객체 규칙
        - 불변 객체 규칙
            1. 설정 메소드 제거
            2. 클래스의 확장을 막는다
            3. 필드는 final로 선언
            4. 필드는 private 일것
            5. 내부의 가변객체는 외부에서 접근할 수 없도록 만든다.
    - 불변객체 장점
        - 동기화가 필요없이 멀티 스레드 환경에서 안전하다.
        - 함수형 프로그래밍에 적합하다. (피연산자가 변경되지 않음)
        - 실패 원자성을 갖는다.
        - 불변 객체끼리는 내부 필드를 공유할 수 있다.
        - 스레드, 클래스, 인스턴스간에 불변객체를 공유해도 안전하다.
    - 불변객체 단점
        - 생성자의 비용이 큰 객체일 경우에 비용이 커진다
        해결책 -> 여러개의 작업을 하나의 작업으로 합쳐서 한번에 처리한다(다단계 연산) 예) 사칙연산 클래스에서 더하기, 빼기, 곱셈 작업을 한번에 할 수 있는 메소드를 만든다
        해결책 -> 가변 동반 클래스를 사용한다  예) StringBuilder
    - 상속을 막는 다른 방법
        - private 또는 package-private 생성자와 정적 팩터리 메소드를 사용
    - 재정의가 가능한 불변 객체 사용시 방어적인 복사를 통해 사용
    - 모든 외부 공개 필드는 final로 설정
        - 계산 비용이 큰값은 캐시할 수 있음
 */